###URL - https://medium.com/analytics-vidhya/8-week-sql-challenge-case-study-week-1-dannys-diner-2ba026c897ab - Solution URL
   URL -https://8weeksqlchallenge.com/case-study-1/ - Case study url

CREATE SCHEMA dannys_diner;
SET search_path = dannys_diner;

CREATE TABLE sales (
  customer_id VARCHAR(1),
  order_date DATE,
  product_id INTEGER
);

INSERT INTO sales
  (customer_id, order_date,product_id)
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  product_id INTEGER,
  product_name VARCHAR(5),
  price INTEGER
);

INSERT INTO menu
  (product_id, product_name, price)
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  customer_id VARCHAR(1),
  join_date DATE
);

INSERT INTO members
  (customer_id, join_date)
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
  
  select * from sales;
  select * from menu;
  select * from members;
  
  
 # Each of the following case study questions can be answered using a single SQL statement:

#What is the total amount each customer spent at the restaurant?
#How many days has each customer visited the restaurant?
#What was the first item from the menu purchased by each customer?
#What is the most purchased item on the menu and how many times was it purchased by all customers?
#Which item was the most popular for each customer?
#Which item was purchased first by the customer after they became a member?
#Which item was purchased just before the customer became a member?
#What is the total items and amount spent for each member before they became a member?
#If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
#In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?



#1. What is the total amount each customer spent at the restaurant?
use university;
select s.customer_id,sum(price) as Total_Sales from sales s 
join menu m on
s.product_id=m.product_id
group by customer_id;

#2. How many days has each customer visited the restaurant?
select * from sales;
select customer_id ,count(distinct(order_date)) as visit_count from sales
group by customer_id
order by visit_count desc;

#3. What was the first item from the menu purchased by each customer?
select * from menu;
select * from sales;

with order_sales_cte as(
select customer_id ,product_name,order_date, dense_rank() over(partition by s. customer_id order by s.order_date) as `rank`
from sales s join menu m on  s.product_id=m.product_id
)
select customer_id ,product_name from  order_sales_cte where `rank` = 1 group by customer_id ,product_name;

select s.customer_id ,m.product_name,order_date, dense_rank() over(partition by s.customer_id order by s.order_date) as `rank`
from sales s join menu m on  s.product_id=m.product_id and  `rank` =1
group by s.customer_id ,m.product_name;

#4. What is the most purchased item on the menu and how many times was it purchased by all customers?
select * from sales;
SELECT COUNT(s.product_id) AS most_purchased, product_name
FROM sales AS s
JOIN menu AS m
 ON s.product_id = m.product_id
GROUP BY s.product_id, product_name
ORDER BY most_purchased DESC
limit 1 offset 0;

#5. Which item was the most popular for each customer?
with fav_item_cte as(
select s.customer_id ,m.product_name,
count(m.product_id) as order_counts,
dense_rank() OVER(partition by s.customer_id order by count(s.customer_id) DESC) AS `RANK`
FROM MENU M  JOIN SALES S
ON m.product_id = S.product_id
group by s.customer_id ,m.product_name
)
SELECT customer_id ,product_name ,ORDER_COUNTS FROM fav_item_cte
 WHERE `RANK`= 1
GROUP BY  customer_id ,product_name;

#6. Which item was purchased first by the customer after they became a member?
SELECT * FROM MEMBERS;
SELECT * FROM SALES;
WITH prior_member_purchased_cte AS 
(
 SELECT s.customer_id, m.join_date, s.order_date, s.product_id,
         DENSE_RANK() OVER(PARTITION BY s.customer_id
         ORDER BY s.order_date DESC) AS `rank`
 FROM sales AS s
 JOIN members AS m
  ON s.customer_id = m.customer_id
 WHERE s.order_date < m.join_date
)
SELECT s.customer_id, s.order_date, m2.product_name 
FROM prior_member_purchased_cte AS s
JOIN menu AS m2
 ON s.product_id = m2.product_id
WHERE `rank` = 1;


#7. What is the total items and amount spent for each member before they became a member?

select s.customer_id , count(distinct s.product_id) AS unique_menu_item, SUM(mm.price) AS total_sales from sales s
join members m on  s.customer_id= m.customer_id
join menu mm on s.product_id = mm.product_id
where s.order_date < m.join_date
GROUP BY s.customer_id;

#8. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

select * from sales;

with price_points as(
select *,
case
when product_id = 1 THEN price * 20
else price*10
end as points
from menu)
select s.customer_id,sum(p.points) as total
from price_points as p
join sales s
on p.product_id=s.product_id
group  by s.customer_id;

#In the first week after a customer joins the program (including their join date) they earn 2x points on all items,
 #not just sushi - how many points do customer A and B have at #the end of January?
 
 WITH dates_cte AS 
(
 SELECT *, 
  DATEADD(DAY, 6, join_date) AS valid_date, 
  EOMONTH('2021-01-31') AS last_date
 FROM members AS m
)
SELECT d.customer_id, s.order_date, d.join_date, 
 d.valid_date, d.last_date, m.product_name, m.price,
 SUM(CASE
  WHEN m.product_name = 'sushi' THEN 2 * 10 * m.price
  WHEN s.order_date BETWEEN d.join_date AND d.valid_date THEN 2 * 10 * m.price
  ELSE 10 * m.price
  END) AS points
FROM dates_cte AS d
JOIN sales AS s
 ON d.customer_id = s.customer_id
JOIN menu AS m
 ON s.product_id = m.product_id
WHERE s.order_date < d.last_date
GROUP BY d.customer_id, s.order_date, d.join_date, d.valid_date, d.last_date, m.product_name, m.price;

#Recreate the table with: customer_id, order_date, product_name, price, member (Y/N)
SELECT s.customer_id, s.order_date, m.product_name, m.price,
CASE
 WHEN mm.join_date > s.order_date THEN 'N'
 WHEN mm.join_date <= s.order_date THEN 'Y'
 ELSE 'N'
 END AS member
FROM sales AS s
LEFT JOIN menu AS m
 ON s.product_id = m.product_id
LEFT JOIN members AS mm
 ON s.customer_id = mm.customer_id;
 
 
#Rank All The Things
#Danny also requires further information about the ranking of customer products, but he purposely does not need the ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program. 
 WITH summary_cte AS 
(
 SELECT s.customer_id, s.order_date, m.product_name, m.price,
  CASE
  WHEN mm.join_date > s.order_date THEN 'N'
  WHEN mm.join_date <= s.order_date THEN 'Y'
  ELSE 'N' END AS member
 FROM sales AS s
 LEFT JOIN menu AS m
  ON s.product_id = m.product_id
 LEFT JOIN members AS mm
  ON s.customer_id = mm.customer_id
)
SELECT *, CASE
 WHEN member = 'N' then NULL
 ELSE
  RANK () OVER(PARTITION BY customer_id, member
  ORDER BY order_date) END AS ranking
FROM summary_cte;







