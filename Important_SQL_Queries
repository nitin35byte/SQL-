SQL Most Important Quesries 

--Create Table :

alter table sales1
add column  discount_flag varchar(20) after discount;

--Copy data from existing column with condition

update  sales1
set discount_flag=if(discount >0 ,'Yes', 'No');

--SUmming mutiple column in one

select (sales*discount+shipping_cost)  as CTC from sales1;


--Bulk uploading in DB

LOAD DATA INFILE  
'E:/sales_data_final.csv'
into table sales1
CHARACTER SET 'utf8'
FIELDS TERMINATED by ','
ENCLOSED by '"'
lines terminated by '\r\n'
IGNORE 1 lines;

-- convert int to date format
select str_to_date(order_date,'%m/%d/%Y') from sales1;

--copying data with date foramt fro existing table
update sales1 
set order_date_new= str_to_date(order_date,'%m/%d/%Y');


--extracting previous days data 

select * from sales1 where ship_date_new <date_sub(now() ,interval 1 week);


--upding data

update sales1 set year_new=year(order_date_new);
update sales1 set Month_New=month(order_date_new);
update sales1 set Day_New=month(order_date_new);


--extracting data with two like condition

select * from employees where first_name like "a%" or first_name like "h%";
select * from student where firstname like "%_itin%";
select SUBSTRING(firstname, 'ni') AS ExtractString from student;
select * from student where firstname like "%a__";
select * from employees where first_name like "%a________";
select * from employees where first_name like "a%o";
select * from employees where first_name like "_r%";
select * from employees where first_name like "______r%";


--between 
select * from salaries where salary between '30000' and '60000';

-----find select max salary

select Max(salary) from salaries where salary not in (select max(salary)  from salaries);(we can use Top function)

select salary from salaries order by salary desc limit 3 offset 1;

SELECT MAX(salary) AS salary 
FROM salaries 
WHERE salary <> (SELECT MAX(salary) 
FROM salaries);


--Delete 

Delete from student where studentid not in (
select max(studentid) from student group by FirstName,LastName);

--case statemet
SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;


--join

select e.emp_no,e.first_name,e.last_name, s.salary from employees e inner join salaries s  on e.emp_no=s.emp_no
union
select e.emp_no,e.first_name,e.last_name, s.salary from employees e inner join salaries s  on e.emp_no=s.emp_no;


---Procedure
USE employees;

drop PROCEDURE if exists select_employees;

DELIMITER $$
CREATE procedure select_employees()
begin
select * from employees 
LIMIT 1000;

END$$
DELIMITER ;


drop PROCEDURE if exists emp_salary;

DELIMITER $$
CREATE procedure emp_salary(p_emp__no INTEGER)
begin
select e.first_name , e.last_name,s.salary ,s.from_date , s.to_date
from employees e
join
salaries s ON e.emp_no=s.emp_no
where emp_no=p_emp__no;

END$$
DELIMITER ;


--query to insert data in  new column whihc having coult one

create table student_dummy3
select * from student GROUP BY studentid Having COUNT(*) > 1;

--Creating table with without coping data
create table sales_dummy
select * from sales1 where 1!=1;

---CReating table with coping all the data from another table
create table sales_dummy
select * from sales1;

--rename table
ALTER TABLE student_dummy3 RENAME TO student_dummy33;


-- rank and ddesc rank

select * from student where studentID in (1,2);
select  Class , Marks, DENSE_RANK() OVER
(partition by subject order by marks desc);#as 'DENSE_RANK'

SELECT StudentID,stream,Class,Marks, dense_rank() 
OVER ( partition by stream order by marks desc ) 
AS 'dense_rank' FROM student;

SELECT StudentID,stream,Class,Marks, rank() 
OVER ( partition by stream order by marks desc ) 
AS 'rank' FROM student;


--------duplicate row 

SELECT Emp_no, COUNT(Emp_no) FROM employees GROUP BY Emp_no HAVING COUNT(Emp_no)>1;


--------To find second min salry

select * from salaries 
where salary = (select min(salary) from salaries 
where salary > (select min(salary) from salaries));


----Window Function

--- Row Number , Rank , Dense Rank

select * from (select emp_no,salary ,row_number() over(order by salary desc) as r_number ,
rank() over(order by salary desc) as r_rank,
dense_rank () over(order by salary desc) as d_number 
from salaries )as test;

select * from (select emp_no , salary,
row_number() over(order by salary desc) as 'row_number',
rank() over(order by salary desc ) as 'row_rank',
dense_rank() over( order by salary desc) as 'dense_rank'
from salaries ) as test where `dense_rank` = 3;




--func to return int to varchar
DELIMITER &&
create function int_to_str(a int)
returns varchar(30)
deterministic
begin
declare b varchar(20);
set a = b;
return b;
end&&

delimiter &&
create function mark_sales(sales int)
returns varchar(30)
deterministic
begin
declare flag_sales varchar(30);
if sales <= 100 then
set flag_sales= "super affordable product" ;
elseif sales > 100 and sales < 300 then 
set flag_sales = "affordable" ;
elseif sales >300 and sales < 600 then
 set flag_sales = "moderate price" ;
 else 
	set flag_sales = "expensive" ;
end if ;
return flag_sales;
end&&
select mark_sales(200);


#select profit ,discount,sales ,final_profit(sales, discount ,profit) from sales1;
#select profit, discount  ,sales ,  final_profits_real(profit, discount,sales) from sales1 ; 


#select sales , add_to_col(sales) as default_sales from sales1;

--order of execution

From 
join
where
Group
Having
Select
Distinct
order by




--------------------------------------------Very Very Important query
select e.emp_no ,d.dept_no ,e.first_name ,e.last_name , s.salary , n.dept_name,e.birth_date,s.from_date , s.to_date, t.title from 
employees e left join salaries s on e.emp_no = s.emp_no
left join dept_emp d on e.emp_no= d.emp_no
left join departments N  on d.dept_no =N.dept_no
left join dept_manager de on e.emp_no = de.emp_no
left join titles t on t.emp_no = t.emp_no
group by t.title;



select max(salary) from salaries;
select max(salary) from salaries where salary not in (select max(salary) from salaries);

select s.salary , d.dept_no, dept_name from salaries s inner join dept_emp d  on s.emp_no = d.emp_no 
inner join departments N  on d.dept_no =N.dept_no group by dept_name order by salary desc;

SELECT department 
FROM salaries 
GROUP BY departments 
HAVING MAX(salary) = (SELECT MAX(salary) FROM employees);
select * from  departments;

select max(salary) from salaries where dept_name in (select dept_name from departments);


SELECT d.dept_name, MAX(s.salary) as max_salary
FROM salaries s
JOIN dept_emp de ON s.emp_no = de.emp_no
JOIN departments d ON de.dept_no = d.dept_no
GROUP BY d.dept_name
HAVING MAX(s.salary) = (SELECT MAX(salary) FROM salaries);


#Create View
create  or replace view Dept_wise_Max_Salary as
SELECT d.dept_name, MAX(s.salary) as max_salary
FROM salaries s
JOIN dept_emp de ON s.emp_no = de.emp_no
JOIN departments d ON de.dept_no = d.dept_no
GROUP BY d.dept_name;

select * from titles;

select d.dept_name ,max(salary) , t.title from salaries s 
join dept_emp de on s.emp_no = de.emp_no
join departments d on d.dept_no = de.dept_no 
join titles t on t.emp_no = s.emp_no
group by d.dept_name
order  by max(salary) desc;




--creating DATABASE
create database dress_data;

--create columns and tables
use dress_data;
create table if not exists dress(
`Dress_ID` varchar(30),	
`Style`	varchar(30),	
`Price`	varchar(30),	
`Rating`	varchar(30),	
`Size`	varchar(30),	
`Season`	varchar(30),	
`NeckLine`	varchar(30),	
`SleeveLength` varchar(30),		
`waistline`	varchar(30),	
`Material`	varchar(30),	
`FabricType`	varchar(30),	
`Decoration`	varchar(30),	
`Pattern Type` varchar(30),		
`Recommendation` varchar(30));

alter table dress add primary key(Dress_ID);

drop table dress;

--Importing data files to tables

LOAD DATA INFILE  
'C:/Users/lenovo/Desktopflights_cleaned.csv'
into table dress
CHARACTER SET 'utf8'
FIELDS TERMINATED by ','
ENCLOSED by '"'
lines terminated by '\r\n'
IGNORE 1 lines;


select * from dress;

show tables;


-----------------------------------------------concat 

select  concat(first_name, '(',right(first_name , 1),')') as first_name , concat(last_name, '(',left(last_name , 1),')') as last_name from employees order by first_name desc;

select concat("There are total of " , count(dept_name), "", lower(dept_name),"s." ) as total from departments group by dept_name order by total;


-----------------------Store procedure----------------------------

CREATE DEFINER=`root`@`localhost` PROCEDURE `add_user`(IN input_name VARCHAR(255), IN input_email VARCHAR(255) , out message varchar(255))
BEGIN
    DECLARE user_count INTEGER;
    SELECT COUNT(*) INTO user_count FROM users WHERE email = input_email;
    IF user_count = 0 THEN
        INSERT INTO users (name, email) VALUES (input_name, input_email);
        set message ='user inserted';
	else
        set message = 'email already exist';
    END IF;
END

set @message = '';
call campusx.add_user('rahul', 'xyz@gmail.com', @message);
select @message;



#--------------------------------------------------------------------------------------
CREATE DEFINER=`root`@`localhost` PROCEDURE `Place_order_1`(IN input_user_id INTEGER, IN input_r_id INTEGER, IN input_f_ids VARCHAR(255),
 OUT total_amount INTEGER)
BEGIN
    DECLARE new_order_id INTEGER;
    DECLARE f_id1 INTEGER;
    DECLARE f_id2 INTEGER;
    
    SET f_id1 = SUBSTRING_INDEX(input_f_ids, ',', 1);
    SET f_id2 = SUBSTRING_INDEX(input_f_ids, ',', -1);
    
    SELECT MAX(order_id)+1 INTO new_order_id FROM orders;
    
    SELECT SUM(price) INTO total_amount FROM menu
    WHERE r_id = input_r_id AND f_id IN (f_id1, f_id2);
    
    INSERT INTO orders(order_id, user_id, r_id, amount, date)
    VALUES (new_order_id, input_user_id, input_r_id, total_amount, DATE(NOW()));
    
    INSERT INTO order_details(order_id, f_id)
    VALUES (new_order_id, f_id1), (new_order_id, f_id2);
END;


set @total_amount ='';
call zomato.Place_order_1(3, 3, '6,7', @total_amount);
select @total_amount;
